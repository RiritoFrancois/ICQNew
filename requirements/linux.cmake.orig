message(STATUS "")

# Collecting LIBs dependencies
message(STATUS "[dependencies: libs] Collecting LIBs dependencies")
list(APPEND externalLibDeps "boost")
list(APPEND externalLibDeps "breakpad")
list(APPEND externalLibDeps "curl")
list(APPEND externalLibDeps "ffmpeg")
list(APPEND externalLibDeps "icu")
list(APPEND externalLibDeps "libdbus")
list(APPEND externalLibDeps "libphonenumber")
list(APPEND externalLibDeps "minizip")
list(APPEND externalLibDeps "nghttp2")
list(APPEND externalLibDeps "openal")
list(APPEND externalLibDeps "openssl")
list(APPEND externalLibDeps "protobuf")
list(APPEND externalLibDeps "qt")
list(APPEND externalLibDeps "re2")
list(APPEND externalLibDeps "zlib")
list(APPEND externalLibDeps "zstd")
list(APPEND externalLibDeps "rlottie")
message(STATUS "")

# Collecting SRCs dependencies
message(STATUS "[dependencies: srcs] Collecting SRCs dependencies")
list(APPEND externalSrcDeps "breakpad")
list(APPEND externalSrcDeps "rapidjson")
message(STATUS "")

# Collecting additionals LIBs dependencies
message(STATUS "[dependencies: additionals] Collecting additionals LIBs dependencies")
list(APPEND additionalsLibDeps "libXau.a")
list(APPEND additionalsLibDeps "libxcb-util.a")
list(APPEND additionalsLibDeps "libXdmcp.a")
list(APPEND additionalsLibDeps "libXext.a")
list(APPEND additionalsLibDeps "libXi.a")
list(APPEND additionalsLibDeps "libxkbcommon-x11.a")
list(APPEND additionalsLibDeps "libxkbcommon.a")
message(STATUS "")

# Collecting BINs dependencies
message(STATUS "[dependencies: binaries] Collecting BINs dependencies")
list(APPEND externalBinDeps "lconvert")
list(APPEND externalBinDeps "lrelease")
list(APPEND externalBinDeps "moc")
list(APPEND externalBinDeps "rcc")
list(APPEND externalBinDeps "uic")
list(APPEND externalBinDeps "qmake")
message(STATUS "")


if(NOT UNIX OR APPLE)

    message(STATUS "WINDOWS OR APPLE, CONTINUE")

else()

    message(STATUS "[linux]")

    message(STATUS "–----")
    foreach(pkgName ${externalLibDeps})
        set(_pkg_arch "x86_64")
        set(_pkg_version "${deps_lib_version_${pkgName}}")
        set(_pkg_link "${DOWNLOADS_URL}/external/${pkgName}/bin/${_pkg_version}/${pkgName}_${_pkg_version}_build_${_pkg_arch}.tar.gz")
        set(_pkg_destination "${DOWNLOADS_PATH}/${pkgName}_${_pkg_version}_build_${_pkg_arch}.tar.gz")
        set(_pkg_md5 "${_pkg_destination}.md5")
        set(_pkg_unpacked "${ICQ_EXTERNAL}/${pkgName}_${_pkg_version}")
        message(STATUS "|-> ${pkgName} [${_pkg_version}] - ${_pkg_link}")
        common_prepare_libs("all" "${_pkg_md5}" "${_pkg_link}" "${_pkg_destination}" "${_pkg_unpacked}")
    endforeach()
    message(STATUS "–----")

    foreach(pkgName ${externalSrcDeps})
        set(_pkg_arch "x86_64")
        # Could be different
        set(_pkg_version "${deps_lib_version_${pkgName}}")
        set(_pkg_version_src "${deps_lib_version_${pkgName}_src}")
        set(_pkg_link "${DOWNLOADS_URL}/external/${pkgName}/src/${_pkg_version}/${pkgName}_${_pkg_version}_${_pkg_version_src}.tar.gz")
        set(_pkg_destination "${DOWNLOADS_PATH}/${pkgName}_${_pkg_version}_${_pkg_version_src}.tar.gz")
        set(_pkg_unpacked "${ICQ_EXTERNAL}/${pkgName}_${_pkg_version}_${_pkg_version_src}")
        # if _pkg_version_src is not defined
        if("${_pkg_version_src}" STREQUAL "")
            set(_pkg_link "${DOWNLOADS_URL}/external/${pkgName}/src/${_pkg_version}/${pkgName}_${_pkg_version}.tar.gz")
            set(_pkg_destination "${DOWNLOADS_PATH}/${pkgName}_${_pkg_version}.tar.gz")
            set(_pkg_unpacked "${ICQ_EXTERNAL}/${pkgName}_${_pkg_version}")
        endif()
        set(_pkg_md5 "${_pkg_destination}.md5")
        message(STATUS "|-> ${pkgName} [${_pkg_version} / ${_pkg_version_src}] - ${_pkg_link}")
        common_prepare_libs("all" "${_pkg_md5}" "${_pkg_link}" "${_pkg_destination}" "${_pkg_unpacked}")
    endforeach()
    message(STATUS "–----")

    foreach(pkgName ${additionalsLibDeps})
        set(_pkg_link "${DOWNLOADS_URL}/external/platform_specific/bin/${pkgName}")
        set(_pkg_destination "${ICQ_EXTERNAL}/additionals/${pkgName}")
        set(_pkg_md5 "${_pkg_destination}.md5")
        message(STATUS "|-> ${pkgName} - ${_pkg_link}")
        common_prepare_libs("download" "${_pkg_md5}" "${_pkg_link}" "${_pkg_destination}" "SKIPPED")
    endforeach()
    message(STATUS "–----")

    foreach(pkgName ${externalBinDeps})
        set(_pkg_link "${DOWNLOADS_URL}/external/qt/bin/${deps_ver_qt_utils}/${pkgName}")
        set(_pkg_destination "${ICQ_EXTERNAL}/qt_utils/${pkgName}")
        set(_pkg_md5 "${_pkg_destination}.md5")
        message(STATUS "|-> ${pkgName} - ${_pkg_link}")
        common_prepare_libs("download" "${_pkg_md5}" "${_pkg_link}" "${_pkg_destination}" "SKIPPED")
    endforeach()
    message(STATUS "–----")

    message(STATUS "")
    message(STATUS "[linux]")
    message(STATUS "")

endif()
